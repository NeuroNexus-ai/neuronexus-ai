name: CI - GPU (Windows self-hosted)

on:
  push:
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-gpu-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gpu-tests:
    name: GPU Job (Windows, self-hosted)
    runs-on: [self-hosted, Windows, gpu, cuda, nvidia]
    timeout-minutes: 60
    defaults:
      run:
        shell: pwsh   # نستخدم PowerShell 7

    steps:
      # --- الخطوة 1: سحب الكود ---
      - name: Checkout
        uses: actions/checkout@v4

      # --- الخطوة 2: معلومات PowerShell + CUDA (قبل تثبيت بايثون) ---
      - name: Print runner info (PowerShell / CUDA)
        run: |
          Write-Host "=== PowerShell Version ==="
          $PSVersionTable.PSVersion
          
          Write-Host "`n=== NVIDIA / CUDA ==="
          if (Get-Command nvidia-smi.exe -ErrorAction SilentlyContinue) {
            nvidia-smi.exe
          } else {
            Write-Host "nvidia-smi not found"
          }
          Write-Host "CUDA_PATH: $env:CUDA_PATH"

      # --- الخطوة 3: تثبيت Python 3.12 ---
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          check-latest: true

      # --- الخطوة 4: تحقق من Python ---
      - name: Verify Python
        run: |
          Write-Host "=== Python Version ==="
          python --version
          
          Write-Host "`n=== Python Path ==="
          where.exe python

      # --- الخطوة 5: كاش pip ---
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # --- الخطوة 6: تثبيت المتطلبات ---
      - name: Install dependencies (venv)
        working-directory: fastapi
        run: |
          python -m venv .venv
          .\.venv\Scripts\python.exe -m pip install --upgrade pip
          if (Test-Path .\requirements.txt) {
            .\.venv\Scripts\python.exe -m pip install -r requirements.txt
          }
          if (Test-Path .\requirements-dev.txt) {
            .\.venv\Scripts\python.exe -m pip install -r requirements-dev.txt
          }

      # --- الخطوة 7: فحص CUDA داخل Python ---
      - name: Torch / CUDA sanity check
        working-directory: fastapi
        continue-on-error: true
        run: |
          $py = ".\.venv\Scripts\python.exe"
          $code = @'
          import torch, sys
          print("Torch:", torch.__version__)
          print("CUDA available:", torch.cuda.is_available())
          if torch.cuda.is_available():
          print("Device count:", torch.cuda.device_count())
          print("Current device:", torch.cuda.current_device())
          print("Device name:", torch.cuda.get_device_name(0))
          '@
          $code | Set-Content -Encoding UTF8 _torch_check.py
          & $py _torch_check.py

      
      - name: Run GPU tests (pytest if present)
        working-directory: fastapi
        run: |
          $py = ".\.venv\Scripts\python.exe"
          if (Test-Path .\pytest.ini -or (Get-ChildItem -Recurse -Include "*test*.py" | Select-Object -First 1)) {
            & $py -m pip install pytest pytest-cov
            & $py -m pytest -q --maxfail=1 --disable-warnings `
              --cov=app --cov-report=xml --junitxml=pytest-report.xml
          } else {
            Write-Host "No tests detected. Skipping pytest."
          }

      
      - name: Upload coverage.xml (if exists)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: fastapi/coverage.xml
          if-no-files-found: ignore

      - name: Upload pytest report (if exists)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: fastapi/pytest-report.xml
          if-no-files-found: ignore
