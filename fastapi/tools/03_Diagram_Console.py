# Path from repo root: fastapi\tools\03_Diagram_Console.py
from __future__ import annotations

import sys
import json
import subprocess
from pathlib import Path
from typing import Dict, Any

import streamlit as st

# Add project root to sys.path
sys.path.insert(0, str(Path(__file__).resolve().parents[2]))


def find_fastapi_root() -> Path:
    """Locate the FastAPI project root directory."""
    cwd = Path.cwd()
    if (cwd / "tools" / "diagram_services_plugins.py").is_file() and (cwd / "app").is_dir():
        return cwd
    if (cwd / "fastapi" / "tools" / "diagram_services_plugins.py").is_file():
        return cwd / "fastapi"
    here = Path(__file__).resolve()
    for p in [here] + list(here.parents):
        if (p / "tools" / "diagram_services_plugins.py").is_file() and (p / "app").is_dir():
            return p
        if (p / "fastapi" / "tools" / "diagram_services_plugins.py").is_file():
            return p / "fastapi"
    raise RuntimeError("Could not locate fastapi root containing tools/diagram_services_plugins.py")


FASTAPI_ROOT = find_fastapi_root()
TOOLS = FASTAPI_ROOT / "tools"
GEN = TOOLS / "diagram_services_plugins.py"
OUT_DIR = FASTAPI_ROOT / "build" / "diagrams"
OUT_DIR.mkdir(parents=True, exist_ok=True)

CFG_PATH = TOOLS / ".diagram_console.json"

if str(FASTAPI_ROOT) not in sys.path:
    sys.path.insert(0, str(FASTAPI_ROOT))

try:
    from fastapi.tools import diagram_services_plugins as dsp  # type: ignore
except Exception as e:
    st.error(f"Failed to import generator: {e}")
    st.stop()


DEFAULTS: Dict[str, Any] = {
    "direction": "LR",
    "service": "",
    "include_empty": False,
    "edge_color": "#90A4AE",
    "edge_width": 1.6,
    "arrow_size": 0.8,
    "loader_edge_color": "#B0BEC5",
    "edge_label_color": "#455A64",
    "font": "Segoe UI",
    "font_size": 14,  # ✅ جديد: تحكّم بحجم الخط
    "mermaid_font": "Segoe UI, Arial, sans-serif",
    "out": "services_plugins",
}


def load_store() -> Dict[str, Any]:
    """Load the stored configuration from the config file."""
    if CFG_PATH.is_file():
        try:
            return json.loads(CFG_PATH.read_text(encoding="utf-8"))
        except Exception:
            pass
    return {"last": DEFAULTS.copy(), "presets": {}}


def save_store(store: Dict[str, Any]) -> None:
    """Save the configuration to the config file."""
    CFG_PATH.write_text(json.dumps(store, indent=2, ensure_ascii=False), encoding="utf-8")


store = load_store()


@st.cache_data(show_spinner=False)
def discover_services_with_tasks() -> list[str]:
    """Discover services and plugins that have associated tasks."""
    services = dsp._discover_units(dsp.SERVICES_DIR, "service")
    plugins = dsp._discover_units(dsp.PLUGINS_DIR, "plugin")
    services = {k: v for k, v in services.items() if v.tasks}
    plugins = {k: v for k, v in plugins.items() if v.tasks}
    return sorted(set(services.keys()) & set(plugins.keys()))


def ensure_session_defaults():
    """Ensure session state is initialized with default values."""
    last = store.get("last", DEFAULTS)
    # تأكد من وجود المفتاح الجديد font_size حتى لو كان الملف قديم
    merged = DEFAULTS | last
    for k, v in merged.items():
        st.session_state.setdefault(k, v)
    st.session_state.setdefault("preset_name", "")


ensure_session_defaults()


def run_generator(cfg: Dict[str, Any]) -> tuple[int, str, str]:
    """Run the diagram generator script with the given configuration."""
    args = [
        sys.executable, str(GEN),
        "--direction", cfg["direction"],
        "--edge-color", cfg["edge_color"],
        "--edge-width", str(cfg["edge_width"]),
        "--arrow-size", str(cfg["arrow_size"]),
        "--loader-edge-color", cfg["loader_edge_color"],
        "--edge-label-color", cfg["edge_label_color"],
        "--font", cfg["font"],
        "--font-size", str(cfg["font_size"]),  # ✅ كان ثابت 14، صار من الإعدادات
        "--mermaid-font", cfg["mermaid_font"],
        "--out", cfg["out"],
    ]
    if cfg.get("service"):
        args += ["--service", cfg["service"]]
    if cfg.get("include_empty"):
        args += ["--include-empty"]

    proc = subprocess.run(args, cwd=str(FASTAPI_ROOT), capture_output=True, text=True)
    return proc.returncode, proc.stdout, proc.stderr


def read_outputs(base_name: str) -> dict:
    """Read the output files generated by the diagram generator."""
    base = OUT_DIR / base_name
    paths = {
        "svg": base.with_suffix(".svg"),
        "png": base.with_suffix(".png"),
        "mmd": base.with_suffix(".mmd")
    }
    outs = {}
    for k, p in paths.items():
        if p.is_file():
            outs[k] = p.read_bytes() if k != "mmd" else p.read_text(encoding="utf-8", errors="ignore")
    return outs


def apply_preset_to_session(preset_cfg: Dict[str, Any]):
    """Apply a saved preset configuration to the current Streamlit session state."""
    for k, v in preset_cfg.items():
        st.session_state[k] = v


# ===================== UI =====================

st.title("Diagram Console")

with st.sidebar:
    st.subheader("Layout")
    st.session_state.direction = st.radio("Direction", options=["LR", "TB"], index=["LR", "TB"].index(st.session_state.direction))
    services = ["(all)"] + discover_services_with_tasks()
    current_service = st.session_state.service if st.session_state.service else "(all)"
    st.session_state.service = st.selectbox("Service (filter)", services, index=services.index(current_service))
    if st.session_state.service == "(all)":
        st.session_state.service = ""
    st.session_state.include_empty = st.checkbox("Include empty services/plugins", value=bool(st.session_state.include_empty))

    st.subheader("Styling")
    st.session_state.edge_color = st.color_picker("Edge color", st.session_state.edge_color)
    st.session_state.edge_width = st.slider("Edge width", 0.2, 6.0, float(st.session_state.edge_width), 0.1)
    st.session_state.arrow_size = st.slider("Arrow size", 0.2, 6.0, float(st.session_state.arrow_size), 0.1)
    st.session_state.loader_edge_color = st.color_picker("Loader edge color", st.session_state.loader_edge_color)
    st.session_state.edge_label_color = st.color_picker("Edge label color", st.session_state.edge_label_color)
    st.session_state.font = st.text_input("Graphviz font", st.session_state.font)
    st.session_state.font_size = st.number_input("Graphviz font size", min_value=6, max_value=48, value=int(st.session_state.font_size), step=1)  # ✅ جديد
    st.session_state.mermaid_font = st.text_input("Mermaid font", st.session_state.mermaid_font)

    st.subheader("Output")
    st.session_state.out = st.text_input("Output base name", st.session_state.out)

    st.divider()
    st.subheader("Presets")
    # حفظ آخر إعدادات بشكل دائم
    if st.button("💾 Save current as Last"):
        store["last"] = {k: st.session_state[k] for k in DEFAULTS.keys()}
        save_store(store)
        st.success("Saved as 'last' ✅")

    colp1, colp2 = st.columns([2,1])
    with colp1:
        st.session_state.preset_name = st.text_input("Preset name", st.session_state.get("preset_name", ""))
    with colp2:
        save_clicked = st.button("Save Preset")

    if save_clicked:
        name = st.session_state.preset_name.strip()
        if not name:
            st.warning("Enter a preset name first.")
        else:
            store.setdefault("presets", {})[name] = {k: st.session_state[k] for k in DEFAULTS.keys()}
            save_store(store)
            st.success(f"Preset '{name}' saved ✅")

    # تحميل/حذف
    preset_keys = sorted(store.get("presets", {}).keys())
    if preset_keys:
        c1, c2 = st.columns(2)
        with c1:
            select_name = st.selectbox("Load preset", ["(choose)"] + preset_keys)
            if st.button("Load", disabled=(select_name == "(choose)")):
                if select_name != "(choose)":
                    apply_preset_to_session(store["presets"][select_name])
                    st.experimental_rerun()
        with c2:
            del_name = st.selectbox("Delete preset", ["(choose)"] + preset_keys, key="del_preset")
            if st.button("Delete", disabled=(del_name == "(choose)")):
                if del_name != "(choose)":
                    store["presets"].pop(del_name, None)
                    save_store(store)
                    st.success(f"Preset '{del_name}' deleted ✅")

st.caption(f"Project root: {FASTAPI_ROOT}")

# أزرار التنفيذ والعرض
r1, r2, r3 = st.columns([1,1,1])
run_clicked = r1.button("▶️ Run generator")
open_clicked = r2.button("🖼️ Open outputs (SVG/PNG/MMD)")
save_last_clicked = r3.button("💽 Save & Run")

if save_last_clicked:
    store["last"] = {k: st.session_state[k] for k in DEFAULTS.keys()}
    save_store(store)
    rc, out, err = run_generator(store["last"])
    if rc == 0:
        st.success("Generated successfully ✅")
    else:
        st.error("Generator returned an error")
    if out:
        st.code(out, language="bash")
    if err:
        st.code(err, language="bash")

elif run_clicked:
    cfg = {k: st.session_state[k] for k in DEFAULTS.keys()}
    rc, out, err = run_generator(cfg)
    if rc == 0:
        st.success("Generated successfully ✅")
    else:
        st.error("Generator returned an error")
    if out:
        st.code(out, language="bash")
    if err:
        st.code(err, language="bash")

if open_clicked:
    outs = read_outputs(st.session_state.out)
    if "svg" in outs:
        st.subheader("SVG")
        st.image(outs["svg"])
    if "png" in outs:
        st.subheader("PNG")
        st.image(outs["png"])
    if "mmd" in outs:
        st.subheader("Mermaid (.mmd)")
        st.code(outs["mmd"], language="markdown")